const express = require('express');
const bodyParser = require('body-parser');
const admin = require('firebase-admin');
const crypto = require('crypto');
const dotenv = require('dotenv');

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

// Initialize Firebase Admin SDK
const serviceAccount = require('./serviceAccountKey.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

app.use(bodyParser.json());

// Webhook Route for Razorpay
app.post('/razorpay-webhook', (req, res) => {
  const secret = process.env.RAZORPAY_SECRET;

  const receivedSignature = req.headers['x-razorpay-signature'];
  const generatedSignature = crypto
    .createHmac('sha256', secret)
    .update(JSON.stringify(req.body))
    .digest('hex');

  if (receivedSignature === generatedSignature) {
    console.log('✅ Razorpay webhook verified');

    const event = req.body.event;

    if (event === 'payment.captured') {
      const payment = req.body.payload.payment.entity;

      // Handle successful payment
      console.log('💰 Payment captured:', payment);
      // Optional: Save to Firebase Firestore or Realtime DB

      return res.status(200).json({ status: 'ok' });
    }

    // Handle other events if needed
    return res.status(200).json({ status: 'event_received' });
  } else {
    console.error('❌ Invalid signature');
    return res.status(400).send('Invalid signature');
  }
});

// Health check
app.get('/', (req, res) => {
  res.send('✅ Webhook server is running');
});

// Start the server
app.listen(port, () => {
  console.log(`🚀 Server running on http://localhost:${port}`);
});
